/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 06 18:46:35 GMT 2016
 */

package se.cag.labs.usermanager;

import org.junit.Test;
import static org.junit.Assert.*;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;
import se.cag.labs.usermanager.Session;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Session_ESTest extends Session_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Session session0 = new Session();
      session0.setUserId("");
      String string0 = session0.getUserId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Session session0 = new Session();
      session0.setToken(", token=");
      String string0 = session0.getToken();
      assertEquals(", token=", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Session session0 = new Session();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      session0.setTimeout(localDateTime0);
      LocalDateTime localDateTime1 = session0.getTimeout();
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Session session0 = new Session();
      session0.setId("<");
      String string0 = session0.getId();
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Session session0 = new Session();
      boolean boolean0 = session0.canEqual(session0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Session session0 = new Session();
      String string0 = session0.getToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Session session0 = new Session();
      LocalDateTime localDateTime0 = session0.getTimeout();
      assertNull(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Session session0 = new Session();
      String string0 = session0.getUserId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Session session0 = new Session();
      String string0 = session0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Session session0 = new Session();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-3665));
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      session0.setTimeout(localDateTime0);
      Session session1 = new Session();
      assertFalse(session1.equals((Object)session0));
      
      session1.setTimeout(localDateTime0);
      boolean boolean0 = session0.equals(session1);
      assertTrue(session1.equals((Object)session0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Session session0 = new Session();
      Session session1 = new Session();
      assertTrue(session1.equals((Object)session0));
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-3638));
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      session1.setTimeout(localDateTime0);
      session0.setToken("iauqCzMw");
      session1.setToken("iauqCzMw");
      boolean boolean0 = session0.equals(session1);
      assertFalse(session1.equals((Object)session0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Session session0 = new Session();
      Session session1 = new Session();
      session0.setUserId("Session(id=null, token=null, userId=null, timeout=null)");
      assertFalse(session0.equals((Object)session1));
      
      session1.setUserId("Session(id=null, token=null, userId=null, timeout=null)");
      boolean boolean0 = session0.equals(session1);
      assertTrue(session1.equals((Object)session0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Session session0 = new Session();
      Session session1 = new Session();
      assertTrue(session1.equals((Object)session0));
      
      session1.setUserId("Session(id=null, token=null, userId=null, timeout=null)");
      boolean boolean0 = session0.equals(session1);
      assertFalse(session1.equals((Object)session0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Session session0 = new Session();
      session0.setUserId("prk");
      Session session1 = new Session();
      boolean boolean0 = session0.equals(session1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Session session0 = new Session();
      Session session1 = new Session();
      assertTrue(session1.equals((Object)session0));
      
      session1.setToken("Session(id=null, token=null, userId=null, timeout=null)");
      boolean boolean0 = session0.equals(session1);
      assertFalse(session1.equals((Object)session0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Session session0 = new Session();
      Session session1 = new Session();
      assertTrue(session1.equals((Object)session0));
      
      session0.setToken("iauqCzMw");
      boolean boolean0 = session0.equals(session1);
      assertFalse(session1.equals((Object)session0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Session session0 = new Session();
      session0.setId("<");
      Session session1 = new Session();
      assertFalse(session1.equals((Object)session0));
      
      session1.setId("<");
      boolean boolean0 = session0.equals(session1);
      assertTrue(session1.equals((Object)session0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Session session0 = new Session();
      session0.setId("<");
      Session session1 = new Session();
      boolean boolean0 = session1.equals(session0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Session session0 = new Session();
      session0.setId("<");
      Session session1 = new Session();
      boolean boolean0 = session0.equals(session1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Session session0 = new Session();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-3638));
      boolean boolean0 = session0.equals(zoneOffset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Session session0 = new Session();
      boolean boolean0 = session0.equals(session0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Session session0 = new Session();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      session0.setTimeout(localDateTime0);
      Session session1 = new Session();
      boolean boolean0 = session0.equals(session1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Session session0 = new Session();
      session0.setUserId("Session(id=null, token=null, userId=null, timeout=null)");
      session0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Session session0 = new Session();
      session0.setToken("vS=f");
      session0.hashCode();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Session session0 = new Session();
      session0.setId("Session(id=null, token=null, userId=null, timeout=null)");
      session0.hashCode();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Session session0 = new Session();
      boolean boolean0 = session0.canEqual("vS=f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Session session0 = new Session();
      session0.setUserId("h,-x");
      String string0 = session0.getUserId();
      assertEquals("h,-x", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Session session0 = new Session();
      session0.setToken("");
      String string0 = session0.getToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Session session0 = new Session();
      String string0 = session0.toString();
      assertEquals("Session(id=null, token=null, userId=null, timeout=null)", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Session session0 = new Session();
      session0.setId("");
      String string0 = session0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Session session0 = new Session();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      session0.setTimeout(localDateTime0);
      session0.hashCode();
  }
}
