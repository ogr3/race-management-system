/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 06 18:47:04 GMT 2016
 */

package se.cag.labs.usermanager;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import se.cag.labs.usermanager.User;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class User_ESTest extends User_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      User user0 = new User();
      boolean boolean0 = user0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      User user0 = new User("");
      String string0 = user0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      User user0 = new User("N+64U[j/sM", "N+64U[j/sM", "N+64U[j/sM");
      User user1 = new User();
      assertTrue(user1.equals((Object)user0));
      
      user1.setId("N+64U[j/sM");
      boolean boolean0 = user1.equals(user0);
      assertFalse(user1.equals((Object)user0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      User user0 = new User("N+64U[j/sM", "N+64U[j/sM", "N+64U[j/sM");
      User user1 = new User();
      boolean boolean0 = user0.equals(user1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      User user0 = new User("");
      User user1 = new User("");
      boolean boolean0 = user0.equals(user1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      User user0 = new User("N+64U[j/sM", "N+64U[j/sM", "N+64U[j/sM");
      boolean boolean0 = user0.equals("N+64U[j/sM");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      User user0 = new User();
      boolean boolean0 = user0.equals(user0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      User user0 = new User("N+64U[j/sM", "N+64U[j/sM", "N+64U[j/sM");
      User user1 = new User();
      assertTrue(user1.equals((Object)user0));
      
      user1.setId("N+64U[j/sM");
      boolean boolean0 = user0.equals(user1);
      assertFalse(user1.equals((Object)user0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      User user0 = new User();
      user0.setId("8~OKYTqaTzzmk0&Q.zL");
      String string0 = user0.getId();
      assertEquals("8~OKYTqaTzzmk0&Q.zL", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      User user0 = new User("");
      user0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      User user0 = new User("N+64U[j/sM", "N+64U[j/sM", "N+64U[j/sM");
      user0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.toString();
      assertEquals("User(id=null)", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      User user0 = new User();
      boolean boolean0 = user0.canEqual(user0);
      assertTrue(boolean0);
  }
}
