/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Wed Jul 06 18:47:15 GMT 2016
 */

package se.cag.labs.usermanager.config;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class SwaggerConfig_ESTest_scaffolding {

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);

  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "se.cag.labs.usermanager.config.SwaggerConfig"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init(); 
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("java.vm.vendor", "Oracle Corporation"); 
    java.lang.System.setProperty("java.specification.version", "1.8"); 
            java.lang.System.setProperty("java.home", "/Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home/jre"); 
        java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("user.home", "/Users/fredrik"); 
                                        java.lang.System.setProperty("user.dir", "/Users/fredrik/Documents/github/race-management-system/user-manager"); 
    java.lang.System.setProperty("java.io.tmpdir", "/var/folders/d5/cjqk01_159b0580b_872c3s00000gn/T/"); 
    java.lang.System.setProperty("awt.toolkit", "sun.lwawt.macosx.LWCToolkit"); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("file.separator", "/"); 
        java.lang.System.setProperty("java.awt.graphicsenv", "sun.awt.CGraphicsEnvironment"); 
    java.lang.System.setProperty("java.awt.printerjob", "sun.lwawt.macosx.CPrinterJob"); 
    java.lang.System.setProperty("java.class.path", "/var/folders/d5/cjqk01_159b0580b_872c3s00000gn/T/EvoSuite_pathingJar2435837837198457896.jar"); 
    java.lang.System.setProperty("java.class.version", "52.0"); 
        java.lang.System.setProperty("java.endorsed.dirs", "/Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home/jre/lib/endorsed"); 
    java.lang.System.setProperty("java.ext.dirs", "/Users/fredrik/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"); 
    java.lang.System.setProperty("java.library.path", "lib"); 
    java.lang.System.setProperty("java.runtime.name", "Java(TM) SE Runtime Environment"); 
    java.lang.System.setProperty("java.runtime.version", "1.8.0_92-b14"); 
    java.lang.System.setProperty("java.specification.name", "Java Platform API Specification"); 
    java.lang.System.setProperty("java.specification.vendor", "Oracle Corporation"); 
        java.lang.System.setProperty("java.vendor", "Oracle Corporation"); 
    java.lang.System.setProperty("java.vendor.url", "http://java.oracle.com/"); 
    java.lang.System.setProperty("java.version", "1.8.0_92"); 
    java.lang.System.setProperty("java.vm.info", "mixed mode"); 
    java.lang.System.setProperty("java.vm.name", "Java HotSpot(TM) 64-Bit Server VM"); 
    java.lang.System.setProperty("java.vm.specification.name", "Java Virtual Machine Specification"); 
    java.lang.System.setProperty("java.vm.specification.vendor", "Oracle Corporation"); 
    java.lang.System.setProperty("java.vm.specification.version", "1.8"); 
    java.lang.System.setProperty("java.vm.version", "25.92-b14"); 
    java.lang.System.setProperty("line.separator", "\n"); 
    java.lang.System.setProperty("os.arch", "x86_64"); 
    java.lang.System.setProperty("os.name", "Mac OS X"); 
    java.lang.System.setProperty("os.version", "10.11.5"); 
    java.lang.System.setProperty("path.separator", ":"); 
    java.lang.System.setProperty("user.country", "SE"); 
    java.lang.System.setProperty("user.language", "sv"); 
    java.lang.System.setProperty("user.name", "fredrik"); 
    java.lang.System.setProperty("user.timezone", "Europe/Stockholm"); 
                                                                          }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(SwaggerConfig_ESTest_scaffolding.class.getClassLoader() ,
      "com.google.common.collect.Lists$RandomAccessPartition",
      "com.google.common.collect.Collections2",
      "springfox.documentation.builders.BuilderDefaults",
      "com.google.common.base.Predicates$ObjectPredicate",
      "springfox.documentation.builders.PathSelectors$1",
      "com.google.common.base.Optional",
      "com.google.common.collect.Lists$TransformingRandomAccessList",
      "com.google.common.collect.Sets$2",
      "com.google.common.collect.Sets$3",
      "com.google.common.base.Predicates$ContainsPatternPredicate",
      "com.google.common.collect.Sets$1",
      "springfox.documentation.builders.PathSelectors",
      "com.google.common.collect.SortedMapDifference",
      "org.springframework.plugin.metadata.PluginMetadata",
      "com.google.common.base.Predicate",
      "org.springframework.util.CollectionUtils",
      "springfox.documentation.schema.AlternateTypeRule",
      "com.google.common.collect.Maps$AbstractFilteredMap",
      "com.google.common.base.Present",
      "com.google.common.base.Joiner",
      "com.google.common.base.Predicates$InstanceOfPredicate",
      "org.springframework.util.LinkedCaseInsensitiveMap",
      "com.google.common.collect.Sets$SetView",
      "org.springframework.http.MediaType$1",
      "org.springframework.http.MediaType$2",
      "com.google.common.collect.Maps$FilteredEntryMap",
      "com.google.common.collect.Lists$Partition",
      "com.google.common.collect.Lists",
      "springfox.documentation.builders.RequestHandlerSelectors$2",
      "springfox.documentation.spring.web.plugins.ApiSelectorBuilder",
      "springfox.documentation.swagger2.annotations.EnableSwagger2",
      "org.springframework.util.MimeType$SpecificityComparator",
      "com.google.common.base.Predicates",
      "springfox.documentation.builders.RequestHandlerSelectors$1",
      "springfox.documentation.builders.RequestHandlerSelectors$3",
      "com.google.common.collect.Lists$TransformingSequentialList",
      "org.springframework.util.InvalidMimeTypeException",
      "com.google.common.base.Absent",
      "com.google.common.collect.Maps$BiMapConverter",
      "org.springframework.context.annotation.Import",
      "org.springframework.util.MultiValueMap",
      "com.google.common.base.Joiner$MapJoiner",
      "springfox.documentation.spi.service.contexts.DocumentationContext",
      "com.google.common.collect.MapDifference",
      "org.springframework.plugin.core.Plugin",
      "springfox.documentation.spring.web.plugins.Docket",
      "com.google.common.base.Preconditions",
      "com.google.common.base.Predicates$CompositionPredicate",
      "com.google.common.collect.UnmodifiableIterator",
      "com.google.common.base.Predicates$OrPredicate",
      "springfox.documentation.schema.DefaultGenericTypeNamingStrategy",
      "springfox.documentation.PathProvider",
      "com.google.common.collect.Maps$FilteredEntryNavigableMap",
      "org.springframework.plugin.metadata.SimplePluginMetadata",
      "com.google.common.base.Joiner$1",
      "com.google.common.base.Joiner$2",
      "springfox.documentation.spi.schema.GenericTypeNamingStrategy",
      "com.google.common.base.Predicates$IsEqualToPredicate",
      "com.google.common.collect.AbstractNavigableMap",
      "com.google.common.collect.ImmutableCollection",
      "com.google.common.collect.ImmutableEnumMap",
      "springfox.documentation.builders.RequestHandlerSelectors",
      "com.google.common.base.Predicates$AssignableFromPredicate",
      "springfox.documentation.spi.service.DocumentationPlugin",
      "com.google.common.collect.Lists$RandomAccessListWrapper",
      "com.google.common.collect.ImmutableEnumSet",
      "org.springframework.util.MimeType",
      "com.google.common.base.Predicates$1",
      "com.google.common.base.Predicates$ContainsPatternFromStringPredicate",
      "com.google.common.base.Converter",
      "com.google.common.base.Predicates$AndPredicate",
      "com.google.common.collect.BiMap",
      "com.google.common.base.Function",
      "com.google.common.collect.ImmutableSet",
      "com.google.common.collect.Lists$AbstractListWrapper",
      "com.google.common.collect.ImmutableMap",
      "org.springframework.http.MediaType",
      "com.google.common.collect.Maps$1",
      "org.springframework.web.bind.annotation.RequestMethod",
      "com.google.common.base.Predicates$NotPredicate",
      "com.google.common.collect.Sets",
      "org.springframework.beans.factory.annotation.Autowire",
      "springfox.documentation.annotations.ApiIgnore",
      "org.springframework.context.annotation.Configuration",
      "com.google.common.collect.Lists$StringAsImmutableList",
      "springfox.documentation.spi.service.contexts.DocumentationContextBuilder",
      "com.google.common.collect.Lists$2",
      "com.google.common.collect.Maps$FilteredEntryBiMap",
      "springfox.documentation.spi.service.contexts.ApiSelector",
      "com.google.common.collect.Lists$1",
      "com.google.common.collect.Multiset",
      "com.google.common.base.Predicates$ObjectPredicate$1",
      "com.google.common.base.Supplier",
      "com.google.common.collect.Multimap",
      "com.google.common.collect.Maps$ImprovedAbstractMap",
      "springfox.documentation.service.ApiInfo",
      "springfox.documentation.spring.web.plugins.ApiSelectorBuilder$1",
      "com.google.common.collect.ImmutableList",
      "com.google.common.collect.Maps$FilteredEntrySortedMap",
      "com.google.common.base.Equivalence",
      "org.springframework.util.MimeTypeUtils",
      "com.google.common.collect.Maps",
      "org.springframework.http.InvalidMediaTypeException",
      "org.springframework.stereotype.Component",
      "springfox.documentation.spi.DocumentationType",
      "com.google.common.collect.Maps$EntryTransformer",
      "se.cag.labs.usermanager.config.SwaggerConfig",
      "com.google.common.collect.Ordering",
      "com.google.common.base.Predicates$ObjectPredicate$4",
      "com.google.common.base.Predicates$ObjectPredicate$3",
      "com.google.common.base.Predicates$ObjectPredicate$2",
      "org.springframework.util.StringUtils",
      "org.springframework.util.Assert",
      "com.google.common.base.Predicates$InPredicate"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(SwaggerConfig_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.springframework.beans.factory.annotation.Autowire",
      "org.springframework.util.MimeType",
      "org.springframework.util.StringUtils",
      "org.springframework.util.MimeTypeUtils",
      "org.springframework.util.LinkedCaseInsensitiveMap",
      "org.springframework.http.MediaType",
      "springfox.documentation.spi.DocumentationType",
      "springfox.documentation.spring.web.plugins.Docket",
      "springfox.documentation.service.ApiInfo",
      "springfox.documentation.schema.DefaultGenericTypeNamingStrategy",
      "com.google.common.collect.Collections2",
      "com.google.common.collect.Maps",
      "com.google.common.base.Optional",
      "com.google.common.base.Absent",
      "com.google.common.base.Predicates",
      "com.google.common.base.Predicates$NotPredicate",
      "com.google.common.base.Predicates$AndPredicate",
      "com.google.common.base.Predicates$ObjectPredicate$1",
      "com.google.common.base.Predicates$ObjectPredicate$2",
      "com.google.common.base.Predicates$ObjectPredicate$3",
      "com.google.common.base.Predicates$ObjectPredicate$4",
      "com.google.common.base.Predicates$ObjectPredicate",
      "springfox.documentation.spi.service.contexts.ApiSelector",
      "com.google.common.base.Present"
    );
  }
}
